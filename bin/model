#!/usr/bin/env python


DESCRIPTION = """
Explicit Decomposition with Neighborhood (EDeN) utility program.
Model driver. 

Example usage:
- for fitting a predictive model:
model -vv fit --cv 5 --scoring 'f1'  --n-active-learning-iterations 3 --size-negative 50 -p pos_train.nx -n neg_train.nx -j 8 -e 20 --model-file mod --output-dir out

-for predicting using a fit model:
model -vv predict -i test.nx --model-file out/mod



Note: the current implementation uses as estimator a regularized linear model
with stochastic  gradient descent (SGD) learning scheme: the gradient of the
loss is estimated each sample at  a time and the model is updated along the way
with a decreasing strength schedule (aka learning rate). """

EPILOG = """
Author: Fabrizio Costa
Copyright: 2015
License: GPL
Maintainer: Fabrizio Costa
Email: costa@informatik.uni-freiburg.de
Status: Production

Cite:  Costa, Fabrizio, and Kurt De Grave, 'Fast neighborhood subgraph pairwise
distance kernel', Proceedings of the 26th International Conference on Machine
Learning. 2010. """

from eden.model_base import *


class ModelInitializer(ModelInitializerBase):

    def __init__(self):
        pass

    def load_data(self, args):
        iterator = node_link_data_to_eden(args.input_file)
        return iterator

    def load_positive_data(self, args):
        return self.load_data(args.positive_input_file)

    def load_negative_data(self, args):
        return self.load_data(args.negative_input_file)

    def pre_processor_init(self, n_iter):
        def pre_processor(graphs, **args):
            return graphs
        pre_processor_parameters = {}
        return pre_processor, pre_processor_parameters

    def add_arguments_fit(self, parser):
        return parser


if __name__ == "__main__":
    start_time = time()

    model_initializer = ModelInitializer()
    parser = argparse_setup(model_initializer, DESCRIPTION, EPILOG)
    args = parser.parse_args()

    if args.no_logging:
        logger = configure_logging(verbosity=args.verbosity)
    else:
        logger = configure_logging(verbosity=args.verbosity, filename='%s.log' % (os.path.basename(__file__)))

    logger.debug('-' * 80)
    logger.debug('Program: %s' % os.path.basename(__file__))
    logger.debug('Called with parameters:\n %s' % serialize_dict(args.__dict__))
    try:
        main(model_initializer, args)
    except Exception:
        import datetime
        curr_time = datetime.datetime.now().strftime("%A, %d. %B %Y %I:%M%p")
        logger.exception("Program run failed on %s" % curr_time)
    finally:
        end_time = time()
        logger.info('Elapsed time: %.1f sec', end_time - start_time)
